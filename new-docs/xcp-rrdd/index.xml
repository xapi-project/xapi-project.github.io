<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RRDD on XAPI Toolstack Developer Documentation</title><link>https://xapi-project.github.io/new-docs/xcp-rrdd/index.html</link><description>Recent content in RRDD on XAPI Toolstack Developer Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xapi-project.github.io/new-docs/xcp-rrdd/index.xml" rel="self" type="application/rss+xml"/><item><title>RRDD archival redesign</title><link>https://xapi-project.github.io/new-docs/xcp-rrdd/futures/archival-redesign/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xcp-rrdd/futures/archival-redesign/index.html</guid><description>Introduction Current problems with rrdd:
rrdd stores knowledge about whether it is running on a master or a slave This determines the host to which rrdd will archive a VM&amp;rsquo;s rrd when the VM&amp;rsquo;s domain disappears - rrdd will always try to archive to the master. However, when a host joins a pool as a slave rrdd is not restarted so this knowledge is out of date. When a VM shuts down on the slave rrdd will archive the rrd locally.</description></item><item><title>RRDD plugin protocol v2</title><link>https://xapi-project.github.io/new-docs/xcp-rrdd/design/plugin-protocol-v2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xcp-rrdd/design/plugin-protocol-v2/index.html</guid><description>Motivation rrdd plugins currently report datasources via a shared-memory file, using the following format:
DATASOURCES 000001e4 dba4bf7a84b6d11d565d19ef91f7906e { &amp;#34;timestamp&amp;#34;: 1339685573.245, &amp;#34;data_sources&amp;#34;: { &amp;#34;cpu-temp-cpu0&amp;#34;: { &amp;#34;description&amp;#34;: &amp;#34;Temperature of CPU 0&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;absolute&amp;#34;, &amp;#34;units&amp;#34;: &amp;#34;degC&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;64.33&amp;#34; &amp;#34;value_type&amp;#34;: &amp;#34;float&amp;#34;, }, &amp;#34;cpu-temp-cpu1&amp;#34;: { &amp;#34;description&amp;#34;: &amp;#34;Temperature of CPU 1&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;absolute&amp;#34;, &amp;#34;units&amp;#34;: &amp;#34;degC&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;62.14&amp;#34; &amp;#34;value_type&amp;#34;: &amp;#34;float&amp;#34;, } } }This format contains four main components:
A constant header string DATASOURCES
This should always be present.</description></item><item><title>SR-Level RRDs</title><link>https://xapi-project.github.io/new-docs/xcp-rrdd/futures/sr-level-rrds/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xcp-rrdd/futures/sr-level-rrds/index.html</guid><description>Introduction Xapi has RRDs to track VM- and host-level metrics. There is a desire to have SR-level RRDs as a new category, because SR stats are not specific to a certain VM or host. Examples are size and free space on the SR. While recording SR metrics is relatively straightforward within the current RRD system, the main question is where to archive them, which is what this design aims to address.</description></item></channel></rss>