<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Topics on XAPI Toolstack Developer Documentation</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/index.html</link><description>Recent content in Topics on XAPI Toolstack Developer Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xapi-project.github.io/new-docs/xen-api/topics/index.xml" rel="self" type="application/rss+xml"/><item><title>API for configuring the udhcp server in Dom0</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/udhcp/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/udhcp/index.html</guid><description>This API allows you to configure the DHCP service running on the Host Internal Management Network (HIMN). The API configures a udhcp daemon residing in Dom0 and alters the service configuration for any VM using the network.
It should be noted that for this reason, that callers who modify the default configuration should be aware that their changes may have an adverse affect on other consumers of the HIMN.
Version history Date State ---- ---- 2013-3-15 Stable Stable: this API is considered stable and unlikely to change between software version and between hotfixes.</description></item><item><title>Guest agents</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/guest-agents/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/guest-agents/index.html</guid><description>&amp;ldquo;Guest agents&amp;rdquo; are special programs which run inside VMs which can be controlled via the XenAPI.
One communication method between XenAPI clients is via Xenstore.
Adding Xenstore entries to VMs Developers may wish to install guest agents into VMs which take special action based on the type of the VM. In order to communicate this information into the guest, a special Xenstore name-space known as vm-data is available which is populated at VM creation time.</description></item><item><title>Memory</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/memory/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/memory/index.html</guid><description>Memory is used for many things:
the hypervisor code: this is the Xen executable itself the hypervisor heap: this is needed for per-domain structures and per-vCPU structures the crash kernel: this is needed to collect information after a host crash domain RAM: this is the memory the VM believes it has shadow memory: for HVM guests running on hosts without hardware assisted paging (HAP) Xen uses shadow to optimise page table updates.</description></item><item><title>Metrics</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/metrics/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/metrics/index.html</guid><description>xcp-rrdd records statistics about the host and the VMs running on top. The metrics are stored persistently for long-term access and analysis of historical trends. Statistics are stored in RRDs (Round Robin Databases). RRDs are fixed-size structures that store time series with decreasing time resolution: the older the data point is, the longer the timespan it represents. &amp;lsquo;Data sources&amp;rsquo; are sampled every few seconds and points are added to the highest resolution RRD.</description></item><item><title>Snapshots</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/snapshots/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/snapshots/index.html</guid><description>Snapshots represent the state of a VM, or a disk (VDI) at a point in time. They can be used for:
backups (hourly, daily, weekly etc) experiments (take snapshot, try something, revert back again) golden images (install OS, get it just right, clone it 1000s of times) Read more about Snapshots: the High-Level Feature.
Taking a VDI snapshot To take a snapshot of a single disk (VDI):
snapshot_vdi &amp;lt;- VDI.snapshot(session_id, vdi, driver_params)where vdi is the reference to the disk to be snapshotted, and driver_params is a list of string pairs providing optional backend implementation-specific hints.</description></item><item><title>VM consoles</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/consoles/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/consoles/index.html</guid><description>Most XenAPI graphical interfaces will want to gain access to the VM consoles, in order to render them to the user as if they were physical machines. There are several types of consoles available, depending on the type of guest or if the physical host console is being accessed:
Types of consoles Operating System Text Graphical Optimized graphical Windows No VNC, using an API call RDP, directly from guest Linux Yes, through VNC and an API call No VNC, directly from guest Physical Host Yes, through VNC and an API call No No Hardware-assisted VMs, such as Windows, directly provide a graphical console over VNC.</description></item><item><title>VM import/export</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/importexport/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/importexport/index.html</guid><description>VMs can be exported to a file and later imported to any Xapi host. The export protocol is a simple HTTP(S) GET, which should be sent to the Pool master. Authorization is either via a pre-created session_id or by HTTP basic authentication (particularly useful on the command-line). The VM to export is specified either by UUID or by reference. To keep track of the export, a task can be created and passed in using its reference.</description></item><item><title>VM Lifecycle</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/vm-lifecycle/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/vm-lifecycle/index.html</guid><description>graph halted-- start(paused) --&amp;gt;paused halted-- start(not paused) --&amp;gt;running running-- suspend --&amp;gt;suspended suspended-- resume(not paused) --&amp;gt;running suspended-- resume(paused) --&amp;gt;paused suspended-- hard shutdown --&amp;gt;halted paused-- unpause --&amp;gt;running paused-- hard shutdown --&amp;gt;halted running-- clean shutdown\n hard shutdown --&amp;gt;halted running-- pause --&amp;gt;paused halted-- destroy --&amp;gt;destroyedThe figureÂ above shows the states that a VM can be in and the API calls that can be used to move the VM between these states.</description></item><item><title>XenCenter</title><link>https://xapi-project.github.io/new-docs/xen-api/topics/xencenter/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/topics/xencenter/index.html</guid><description>XenCenter uses some conventions on top of the XenAPI:
Internationalization for SR names The SRs created at install time now have an other_config key indicating how their names may be internationalized.
other_config[&amp;quot;i18n-key&amp;quot;] may be one of
local-hotplug-cd
local-hotplug-disk
local-storage
xenserver-tools
Additionally, other_config[&amp;quot;i18n-original-value-&amp;lt;field name&amp;gt;&amp;quot;] gives the value of that field when the SR was created. If XenCenter sees a record where SR.name_label equals other_config[&amp;quot;i18n-original-value-name_label&amp;quot;] (that is, the record has not changed since it was created during XenServer installation), then internationalization will be applied.</description></item></channel></rss>