<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XAPI Toolstack Developer Guide on XAPI Toolstack Developer Documentation</title><link>https://xapi-project.github.io/new-docs/index.html</link><description>Recent content in XAPI Toolstack Developer Guide on XAPI Toolstack Developer Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xapi-project.github.io/new-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>The XAPI Toolstack</title><link>https://xapi-project.github.io/new-docs/toolstack/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/toolstack/index.html</guid><description> Responsibilities High-level architecture Environment Daemons Interfaces Features Disaster Recovery Event handling in the Control Plane - Xapi, Xenopsd and Xenstore High-Availability NUMA Snapshots vGPU Xapi Storage Migration</description></item><item><title>Xapi</title><link>https://xapi-project.github.io/new-docs/xapi/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/index.html</guid><description>Xapi is the xapi-project host and cluster manager.
Xapi is responsible for:
providing a stable interface (the XenAPI) allowing one client to manage multiple hosts hosting the &amp;ldquo;xe&amp;rdquo; CLI authenticating users and applying role-based access control locking resources (in particular disks) allowing storage to be managed through plugins planning and coping with host failures (&amp;ldquo;High Availability&amp;rdquo;) storing VM and host configuration generating alerts managing software patching Principles The XenAPI interface must remain backwards compatible, allowing older clients to continue working Xapi delegates all Xenstore/libxc/libxl access to Xenopsd, so Xapi could be run in an unprivileged helper domain Xapi delegates the low-level storage manipulation to SM plugins.</description></item><item><title>Xenopsd</title><link>https://xapi-project.github.io/new-docs/xenopsd/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/index.html</guid><description>Xenopsd is the VM manager of the XAPI Toolstack. Xenopsd is responsible for:
Starting, stopping, rebooting, suspending, resuming, migrating VMs. (Hot-)plugging and unplugging devices such as VBDs, VIFs, vGPUs and PCI devices. Setting up VM consoles. Running bootloaders. Setting QoS parameters. Configuring SMBIOS tables. Handling crashes. etc. Check out the full features list.
The code is in ocaml/xenopsd.
Principles Do no harm: Xenopsd should never touch domains/VMs which it hasn&amp;rsquo;t been asked to manage.</description></item><item><title>Networkd</title><link>https://xapi-project.github.io/new-docs/xcp-networkd/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xcp-networkd/index.html</guid><description>The xcp-networkd daemon (hereafter simply called &amp;ldquo;networkd&amp;rdquo;) is a component in the xapi toolstack that is responsible for configuring network interfaces and virtual switches (bridges) on a host.
The code is in ocaml/networkd.
Principles Distro-agnostic. Networkd is meant to work on at least CentOS/RHEL as well a Debian/Ubuntu based distros. It therefore should not use any network configuration features specific to those distros.
Stateless. By default, networkd should not maintain any state.</description></item><item><title>Squeezed</title><link>https://xapi-project.github.io/new-docs/squeezed/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/squeezed/index.html</guid><description>Squeezed is the XAPI Toolstack&amp;rsquo;s host memory manager (aka balloon driver). Squeezed uses ballooning to move memory between running VMs, to avoid wasting host memory.
Principles Avoid wasting host memory: unused memory should be put to use by returning it to VMs. Memory should be shared in proportion to the configured policy. Operate entirely at the level of domains (not VMs), and be independent of Xen toolstack.</description></item><item><title>Xapi-guard</title><link>https://xapi-project.github.io/new-docs/xapi-guard/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi-guard/index.html</guid><description>The xapi-guard daemon is the component in the xapi toolstack that is responsible for handling persistence requests from VMs (domains). Currently these are UEFI vars and vTPM updates.
The code is in ocaml/xapi-guard. When the daemon managed only with UEFI updates it was called varstored-guard. Some files and package names still use the previous name.
Principles Calls from domains must be limited in privilege to do certain API calls, and to read and write from their corresponding VM in xapi&amp;rsquo;s database only.</description></item><item><title>RRDD</title><link>https://xapi-project.github.io/new-docs/xcp-rrdd/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xcp-rrdd/index.html</guid><description>The xcp-rrdd daemon (hereafter simply called “rrdd”) is a component in the xapi toolstack that is responsible for collecting metrics, storing them as &amp;ldquo;Round-Robin Databases&amp;rdquo; (RRDs) and exposing these to clients.
The code is in ocaml/xcp-rrdd.</description></item><item><title>XenAPI</title><link>https://xapi-project.github.io/new-docs/xen-api/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xen-api/index.html</guid><description> XenAPI Basics Wire Protocol Overview of the XenAPI API evolution XenAPI Reference</description></item></channel></rss>