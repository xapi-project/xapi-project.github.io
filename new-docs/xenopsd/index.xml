<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xenopsd :: XAPI Toolstack Developer Documentation</title><link>https://xapi-project.github.io/new-docs/xenopsd/index.html</link><description>Xenopsd is the VM manager of the XAPI Toolstack. Xenopsd is responsible for:
Starting, stopping, rebooting, suspending, resuming, migrating VMs. (Hot-)plugging and unplugging devices such as VBDs, VIFs, vGPUs and PCI devices. Setting up VM consoles. Running bootloaders. Setting QoS parameters. Configuring SMBIOS tables. Handling crashes. etc. Check out the full features list.
The code is in ocaml/xenopsd.
Principles Do no harm: Xenopsd should never touch domains/VMs which it hasn’t been asked to manage.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://xapi-project.github.io/new-docs/xenopsd/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecture</title><link>https://xapi-project.github.io/new-docs/xenopsd/architecture/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/architecture/index.html</guid><description>Xenopsd instances run on a host and manage VMs on behalf of clients. This picture shows 3 different Xenopsd instances: 2 named “xenopsd-xc” and 1 named “xenopsd-xenlight”.
Each instance is responsible for managing a disjoint set of VMs. Clients should never ask more than one Xenopsd to manage the same VM. Managing a VM means:
handling start/shutdown/suspend/resume/migrate/reboot allowing devices (disks, nics, PCI cards, vCPUs etc) to be manipulated providing updates to clients when things change (reboots, console becomes available, guest agent says something etc).</description></item><item><title>Design</title><link>https://xapi-project.github.io/new-docs/xenopsd/design/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/design/index.html</guid><description>Design documents for xenopsd: Events Hooks PVS Proxy OVS Rules Requirements for suspend image framing Suspend image framing format Tasks</description></item><item><title>Features</title><link>https://xapi-project.github.io/new-docs/xenopsd/features/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/features/index.html</guid><description>General Pluggable backends including xc: drives Xen via libxc and xenguest simulator: simulates operations for component-testing Supports running multiple instances and backends on the same host, looking after different sets of VMs Extensive configuration via command-line (see manpage) and config file Command-line tool for easy VM administration and troubleshooting User-settable degree of concurrency to get VMs started quickly VMs VM start/shutdown/reboot VM suspend/resume/checkpoint/migrate VM pause/unpause VM s3suspend/s3resume customisable SMBIOS tables for OEM-locked VMs hooks for 3rd party extensions: pre-start pre-destroy post-destroy pre-reboot per-VM xenguest replacement suppression of VM reboot loops live vCPU hotplug and unplug vCPU to pCPU affinity setting vCPU QoS settings (weight and cap for the Xen credit2 scheduler) DMC memory-ballooning support support for storage driver domains live update of VM shadow memory guest-initiated disk/nic hotunplug guest-initiated disk eject force disk/nic unplug support for ‘surprise-removable’ devices disk QoS configuration nic QoS configuration persistent RTC two-way guest agent communication for monitoring and control network carrier configuration port-locking for nics text and VNC consoles over TCP and Unix domain sockets PV kernel and ramdisk whitelisting configurable VM videoram programmable action-after-crash behaviour including: shutting down the VM, taking a crash dump or leaving the domain paused for inspection ability to move nics between bridges/switches advertises the VM memory footprints PCI passthrough support for discrete emulators (e.</description></item><item><title>Operation Walk-Throughs</title><link>https://xapi-project.github.io/new-docs/xenopsd/walkthroughs/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/walkthroughs/index.html</guid><description>Let’s trace through interesting operations to see how the whole system works.
Starting a VMComplete walkthrough of starting a VM, from receiving the request to unpause.
Building a VMAfter VM_create, VM_build builds the core of the domain (vCPUs, memory)
VM_build μ-opOverview of the VM_build μ-op (runs after the VM_create μ-op created the domain).
Domain.buildPrepare the build of a VM: Wait for scrubbing, do NUMA placement, run xenguest.
xenguestPerform building VMs: Allocate and populate the domain's system memory.</description></item></channel></rss>