<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on XAPI Toolstack Developer Documentation</title><link>https://xapi-project.github.io/new-docs/xenopsd/design/index.html</link><description>Recent content in Design on XAPI Toolstack Developer Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xapi-project.github.io/new-docs/xenopsd/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Events</title><link>https://xapi-project.github.io/new-docs/xenopsd/design/Events/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/design/Events/index.html</guid><description>ids rather than data; inherently coalescable blocking poll + async operations implies a client needs 2 connections coarse granularity similarity and differences with: XenAPI, event channels, xenstore watches https://github.com/xapi-project/xen-api/blob/30cc9a72e8726d1e7501cd01ddb27ced6d53b9be/ocaml/xapi/xapi_xenops.ml#L1467</description></item><item><title>Hooks</title><link>https://xapi-project.github.io/new-docs/xenopsd/design/hooks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/design/hooks/index.html</guid><description>There are a number of hook points at which xenopsd may execute certain scripts. These scripts are found in hook-specific directories of the form /etc/xapi.d/&amp;lt;hookname&amp;gt;/. All executable scripts in these directories are run with the following arguments:
&amp;lt;script.sh&amp;gt; -reason &amp;lt;reason&amp;gt; -vmuuid &amp;lt;uuid of VM&amp;gt; The scripts are executed in filename-order. By convention, the filenames are usually of the form 10resetvdis.
The hook points are:
vm-pre-shutdown vm-pre-migrate vm-post-migrate (Dundee only) vm-pre-start vm-pre-reboot vm-pre-resume vm-post-resume (Dundee only) vm-post-destroy and the reason codes are:</description></item><item><title>PVS Proxy OVS Rules</title><link>https://xapi-project.github.io/new-docs/xenopsd/design/pvs-proxy-ovs/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/design/pvs-proxy-ovs/index.html</guid><description>Rule Design The Open vSwitch (OVS) daemon implements a programmable switch. XenServer uses it to re-direct traffic between three entities:
PVS server - identified by its IP address a local VM - identified by its MAC address a local Proxy - identified by its MAC address VM and PVS server are unaware of the Proxy; xapi configures OVS to redirect traffic between PVS and VM to pass through the proxy.</description></item><item><title>Requirements for suspend image framing</title><link>https://xapi-project.github.io/new-docs/xenopsd/design/suspend-image-considerations/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/design/suspend-image-considerations/index.html</guid><description>We are currently (Dec 2013) undergoing a transition from the &amp;lsquo;classic&amp;rsquo; xenopsd backend (built upon calls to libxc) to the &amp;lsquo;xenlight&amp;rsquo; backend built on top of the officially supported libxl API.
During this work, we have come across an incompatibility between the suspend images created using the &amp;lsquo;classic&amp;rsquo; backend and those created using the new libxl-based backend. This needed to be fixed to enable RPU to any new version of XenServer.</description></item><item><title>Suspend image framing format</title><link>https://xapi-project.github.io/new-docs/xenopsd/design/suspend-image-framing-format/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/design/suspend-image-framing-format/index.html</guid><description>Example suspend image layout:
+----------------------------+ | 1. Suspend image signature | +============================+ | 2.0 Xenops header | | 2.1 Xenops record | +============================+ | 3.0 Libxc header | | 3.1 Libxc record | +============================+ | 4.0 Qemu header | | 4.1 Qemu save record | +============================+ | 5.0 End_of_image footer | +----------------------------+ A suspend image is now constucted as a series of header-record pairs. The initial signature (1.) is used to determine whether we are dealing with the unstructured, &amp;ldquo;legacy&amp;rdquo; suspend image or the new, structured format.</description></item><item><title>Tasks</title><link>https://xapi-project.github.io/new-docs/xenopsd/design/Tasks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xenopsd/design/Tasks/index.html</guid><description>Some operations performed by Xenopsd are blocking, for example:
suspend/resume/migration attaching disks (where the SMAPI VDI.attach/activate calls can perform network I/O) We want to be able to
present the user with an idea of progress (perhaps via a &amp;ldquo;progress bar&amp;rdquo;) allow the user to cancel a blocked operation that is taking too long associate logging with the user/client-initiated actions that spawned them Principles all operations which may block (the vast majority) should be written in an asynchronous style i.</description></item></channel></rss>