<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How to add.... on XAPI Toolstack Developer Documentation</title><link>https://xapi-project.github.io/new-docs/xapi/guides/howtos/index.html</link><description>Recent content in How to add.... on XAPI Toolstack Developer Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xapi-project.github.io/new-docs/xapi/guides/howtos/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding a Class to the API</title><link>https://xapi-project.github.io/new-docs/xapi/guides/howtos/add-class/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/guides/howtos/add-class/index.html</guid><description>This document describes how to add a new class to the data model that defines the Xen Server API. It complements two other documents that describe how to extend an existing class:
Adding a field Adding a function As a running example, we will use the addition of a class that is part of the design for the PVS Direct feature. PVS Direct introduces proxies that serve VMs with disk images.</description></item><item><title>Adding a field to the API</title><link>https://xapi-project.github.io/new-docs/xapi/guides/howtos/add-field/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/guides/howtos/add-field/index.html</guid><description>This page describes how to add a field to XenAPI. A field is a parameter of a class that can be used in functions and read from the API.
Bumping the database schema version Whenever a field is added to or removed from the API, its schema version needs to be increased. XAPI needs this fundamental procedure in order to be able to detect that an automatic database upgrade is necessary or to find out that the new schema is incompatible with the existing database.</description></item><item><title>Adding a function to the API</title><link>https://xapi-project.github.io/new-docs/xapi/guides/howtos/add-function/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/guides/howtos/add-function/index.html</guid><description>This page describes how to add a function to XenAPI.
Add message to API The file idl/datamodel.ml is a description of the API, from which the marshalling and handler code is generated.
In this file, the create_obj function is used to define a class which may contain fields and support operations (known as &amp;ldquo;messages&amp;rdquo;). For example, the identifier host is defined using create_obj to encapsulate the operations which can be performed on a host.</description></item><item><title>Adding a XenAPI extension</title><link>https://xapi-project.github.io/new-docs/xapi/guides/howtos/add-api-extension/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/guides/howtos/add-api-extension/index.html</guid><description>A XenAPI extension is a new RPC which is implemented as a separate executable (i.e. it is not part of xapi) but which still benefits from xapi parameter type-checking, multi-language stub generation, documentation generation, authentication etc. An extension can be backported to previous versions by simply adding the implementation, without having to recompile xapi itself.
A XenAPI extension is in two parts:
a declaration in the xapi datamodel. This must use the ~forward_to:(Extension &amp;quot;filename&amp;quot;) parameter.</description></item></channel></rss>