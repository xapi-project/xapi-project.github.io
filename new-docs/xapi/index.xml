<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xapi :: XAPI Toolstack Developer Documentation</title><link>https://xapi-project.github.io/new-docs/xapi/index.html</link><description>Xapi is the xapi-project host and cluster manager.
Xapi is responsible for:
providing a stable interface (the XenAPI) allowing one client to manage multiple hosts hosting the “xe” CLI authenticating users and applying role-based access control locking resources (in particular disks) allowing storage to be managed through plugins planning and coping with host failures (“High Availability”) storing VM and host configuration generating alerts managing software patching Principles The XenAPI interface must remain backwards compatible, allowing older clients to continue working Xapi delegates all Xenstore/libxc/libxl access to Xenopsd, so Xapi could be run in an unprivileged helper domain Xapi delegates the low-level storage manipulation to SM plugins.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://xapi-project.github.io/new-docs/xapi/index.xml" rel="self" type="application/rss+xml"/><item><title>Guides</title><link>https://xapi-project.github.io/new-docs/xapi/guides/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/guides/index.html</guid><description>Helpful guides for xapi developers.
How to add.... Adding a Class to the API Adding a field to the API Adding a function to the API Adding a XenAPI extension</description></item><item><title>XE CLI architecture</title><link>https://xapi-project.github.io/new-docs/xapi/cli/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/cli/index.html</guid><description>Info The links in this page point to the source files of xapi v1.132.0, not to the latest source code. Meanwhile, the CLI server code in xapi has been moved to a library separate from the main xapi binary, and has its own subdirectory ocaml/xapi-cli-server.
Architecture The actual CLI is a very lightweight binary in ocaml/xe-cli
It is just a dumb client, that does everything that xapi tells it to do This is a security issue We must trust the xenserver that we connect to, because it can tell xe to read local files, download files, … When it is first called, it takes the few command-line arguments it needs, and then passes the rest to xapi in a HTTP PUT request Each argument is in a separate line Then it loops doing what xapi tells it to do, in a loop, until xapi tells it to exit or an exception happens The protocol description is in ocaml/xapi-cli-protocol/cli_protocol.</description></item><item><title>Database</title><link>https://xapi-project.github.io/new-docs/xapi/database/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/database/index.html</guid><description/></item><item><title>XAPI's Internals</title><link>https://xapi-project.github.io/new-docs/xapi/internals/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/internals/index.html</guid><description>The articles provided under this sub-section intend to act as a developer resource for toolstack engineers.</description></item><item><title>Host memory accounting</title><link>https://xapi-project.github.io/new-docs/xapi/memory/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/memory/index.html</guid><description>Memory is used for many things:
the hypervisor code: this is the Xen executable itself the hypervisor heap: this is needed for per-domain structures and per-vCPU structures the crash kernel: this is needed to collect information after a host crash domain RAM: this is the memory the VM believes it has shadow memory: for HVM guests running on hosts without hardware assisted paging (HAP) Xen uses shadow to optimise page table updates.</description></item><item><title>XAPI's Storage Layers</title><link>https://xapi-project.github.io/new-docs/xapi/storage/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/storage/index.html</guid><description>Info The links in this page point to the source files of xapi v25.11.0.
Xapi directly communicates only with the SMAPIv2 layer. There are no plugins directly implementing the SMAPIv2 interface, but the plugins in other layers are accessed through it:
graph TD A[xapi] --> B[SMAPIv2 interface] B --> C[SMAPIv2 &lt;-> SMAPIv1 state machine: storage_smapiv1_wrapper.ml] C --> G[SMAPIv2 &lt;-> SMAPIv1 translation: storage_smapiv1.ml] B --> D[SMAPIv2 &lt;-> SMAPIv3 translation: xapi-storage-script] G --> E[SMAPIv1 plugins] D --> F[SMAPIv3 plugins] SMAPIv1 These are the files related to SMAPIv1 in xen-api/ocaml/xapi/:</description></item><item><title>XAPI requests walk-throughs</title><link>https://xapi-project.github.io/new-docs/xapi/walkthroughs/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xapi-project.github.io/new-docs/xapi/walkthroughs/index.html</guid><description>Let’s detail the handling process of an XML request within XAPI. The first document uses the migration as an example of such request.
How the migration request goes through Xen API?</description></item></channel></rss>